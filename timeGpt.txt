import pandas as pd
from nixtla import NixtlaClient
window_size=100
# Step 1: Initialize the NixtlaClient with your API key
nixtla_client = NixtlaClient(api_key='nixak-FXPdtbSdEAChg01INGjlWclPz5aRzmYfooyzWLy2ZFsdQwxgRkiYZWZJrhzDgWeIAgiSOrIMZ8riOIRl')


# Step 2: Load your Bitcoin price data
  # Your dataset
df.rename(columns={'hour': 'ds', 'BTC_closing_price': 'y'}, inplace=True)

# Step 3: Filter the last 100 hours of data
df['ds'] = pd.to_datetime(df['ds'])  # Ensure 'ds' is in datetime format
last_100_hours = df[df['ds'] >= (df['ds'].max() - pd.Timedelta(hours=window_size))]

# Step 4: Prepare training data excluding the last 100 hours
train_data = df[df['ds'] < (df['ds'].max() - pd.Timedelta(hours=window_size))]

# Step 5: Shift the exogenous variables
# Replace 'exog1', 'exog2', etc., with the actual column names of your exogenous variables
exog_columns =good_feats # Replace with your actual exogenous variable names
for col in exog_columns:
    train_data[col] = train_data[col].shift(1)  # Shift exogenous variables by 1 step

# Drop rows with NaN values created by shifting
train_data = train_data.dropna()

# Step 6: Prepare the DataFrame for forecasting
# Combine the target variable and exogenous variables for training
train_forecast_data = train_data[['ds', 'y'] + exog_columns]

# Step 7: Forecast the next prices using TimeGPT with exogenous variables
# Pass historical and future exogenous variables in the same DataFrame
forecast_df = nixtla_client.forecast(
    df=train_forecast_data,  # Pass the DataFrame with target and exogenous variables
    h=len(last_100_hours),  # Forecast horizon
)

# Step 8: Print the forecast DataFrame to check its structure
print(forecast_df)

# Step 9: Check for the correct column name for forecasted values
# Adjust this based on the actual column name in the forecast_df
if 'TimeGPT' in forecast_df.columns:
    forecasted_prices = forecast_df['TimeGPT'].values
else:
    print("Column 'TimeGPT' not found. Available columns:", forecast_df.columns)
    forecasted_prices = forecast_df.iloc[:, 0].values  # Assuming the first column is the forecasted values

# Step 10: Compare the forecasted prices with the actual prices
actual_prices = last_100_hours['y'].values

# Step 11: Determine the direction of price movement
predictions = []
for i in range(1, len(forecasted_prices)):
    if forecasted_prices[i] > forecasted_prices[i - 1]:
        predictions.append(1)  # Price goes up
    else:
        predictions.append(0)  # Price goes down

# Step 12: Calculate actual directions
actual_directions = []
for i in range(1, len(actual_prices)):
    if actual_prices[i] > actual_prices[i - 1]:
        actual_directions.append(1)  # Price goes up
    else:
        actual_directions.append(0)  # Price goes down

# Step 13: Calculate accuracy
correct_predictions = sum(p == a for p, a in zip(predictions, actual_directions))
accuracy = correct_predictions / len(predictions) * 100

# Step 14: Print the results
print(f"Accuracy of predictions over the last 100 hours: {accuracy:.2f}%")

#https://medium.com/@lilyyapinglang/structured-bitcoin-price-forecasting-with-timegpt-a-step-by-step-guide-7f914ccb0542